# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

1.0 {
    global:
        extern "C++" {
            "OHOS::Global::I18n::LocaleInfo::allValidLocales";
            "OHOS::Global::I18n::LocaleInfo::GetValidLocales()";
            "OHOS::Global::I18n::LocaleInfo::Maximize()";
            "OHOS::Global::I18n::LocaleInfo::Minimize()";
            "OHOS::Global::I18n::LocaleInfo::LocaleInfo(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::LocaleInfo::LocaleInfo(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::map<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::less<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > >, std::__h::allocator<std::__h::pair<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > > >&)";
            "OHOS::Global::I18n::LocaleInfo::~LocaleInfo()";
            "OHOS::Global::I18n::IsLowerCase(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::IsSpaceChar(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::IsUpperCase(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::PluralRules::Select(double)";
            "OHOS::Global::I18n::PluralRules::PluralRules(std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > >&, std::__h::map<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::less<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > >, std::__h::allocator<std::__h::pair<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > > >&)";
            "OHOS::Global::I18n::PluralRules::~PluralRules()";
            "OHOS::Global::I18n::ComputeValue(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::vector<double, std::__h::allocator<double> >&)";
            "OHOS::Global::I18n::I18nCalendar::GetTimeZone()";
            "OHOS::Global::I18n::I18nCalendar::SetTimeZone(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >)";
            "OHOS::Global::I18n::I18nCalendar::GetDisplayName(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >&)";
            "OHOS::Global::I18n::I18nCalendar::GetFirstDayOfWeek()";
            "OHOS::Global::I18n::I18nCalendar::SetFirstDayOfWeek(int)";
            "OHOS::Global::I18n::I18nCalendar::GetMinimalDaysInFirstWeek()";
            "OHOS::Global::I18n::I18nCalendar::SetMinimalDaysInFirstWeek(int)";
            "OHOS::Global::I18n::I18nCalendar::Set(UCalendarDateFields, int)";
            "OHOS::Global::I18n::I18nCalendar::Set(int, int, int)";
            "OHOS::Global::I18n::I18nCalendar::SetTime(double)";
            "OHOS::Global::I18n::I18nCalendar::IsWeekend()";
            "OHOS::Global::I18n::I18nCalendar::IsWeekend(long long, UErrorCode&)";
            "OHOS::Global::I18n::I18nCalendar::I18nCalendar(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >)";
            "OHOS::Global::I18n::I18nCalendar::I18nCalendar(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, OHOS::Global::I18n::CalendarType)";
            "OHOS::Global::I18n::I18nCalendar::~I18nCalendar()";
            "OHOS::Global::I18n::I18nTimeZone::GetRawOffset()";
            "OHOS::Global::I18n::I18nTimeZone::CreateInstance(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >&, bool)";
            "OHOS::Global::I18n::I18nTimeZone::GetDisplayName(bool)";
            "OHOS::Global::I18n::I18nTimeZone::GetDisplayName(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >)";
            "OHOS::Global::I18n::I18nTimeZone::GetDisplayName(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, bool)";
            "OHOS::Global::I18n::I18nTimeZone::GetDisplayName()";
            "OHOS::Global::I18n::I18nTimeZone::GetAvailableIDs()";
            "OHOS::Global::I18n::I18nTimeZone::GetCityDisplayName(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >&)";
            "OHOS::Global::I18n::I18nTimeZone::GetAvailableZoneCityIDs()";
            "OHOS::Global::I18n::I18nTimeZone::GetID()";
            "OHOS::Global::I18n::I18nTimeZone::GetOffset(double)";
            "OHOS::Global::I18n::I18nTimeZone::I18nTimeZone(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >&, bool)";
            "OHOS::Global::I18n::I18nTimeZone::~I18nTimeZone()";
            "OHOS::Global::I18n::IsWhiteSpace(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::LocaleConfig::IsSuggested(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::LocaleConfig::IsSuggested(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::LocaleConfig::Is24HourClock()";
            "OHOS::Global::I18n::LocaleConfig::GetValidLocale(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::LocaleConfig::Set24HourClock(bool)";
            "OHOS::Global::I18n::LocaleConfig::CheckPermission()";
            "OHOS::Global::I18n::LocaleConfig::GetSystemLocale()";
            "OHOS::Global::I18n::LocaleConfig::GetSystemRegion()";
            "OHOS::Global::I18n::LocaleConfig::SetSystemLocale(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::LocaleConfig::SetSystemRegion(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::LocaleConfig::GetDisplayRegion(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, bool)";
            "OHOS::Global::I18n::LocaleConfig::GetSystemLanguage()";
            "OHOS::Global::I18n::LocaleConfig::SetSystemLanguage(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::LocaleConfig::GetDisplayLanguage(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, bool)";
            "OHOS::Global::I18n::LocaleConfig::GetSystemCountries(std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > >&)";
            "OHOS::Global::I18n::LocaleConfig::GetSystemLanguages(std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > >&)";
            "OHOS::Global::I18n::LocaleConfig::GetUsingLocalDigit()";
            "OHOS::Global::I18n::LocaleConfig::SetUsingLocalDigit(bool)";
            "OHOS::Global::I18n::LocaleConfig::IsRTL(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::NumberFormat::GetResolvedOptions(std::__h::map<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::less<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > >, std::__h::allocator<std::__h::pair<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > > >&)";
            "OHOS::Global::I18n::NumberFormat::Format(double)";
            "OHOS::Global::I18n::NumberFormat::NumberFormat(std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > > const&, std::__h::map<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::less<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > >, std::__h::allocator<std::__h::pair<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > > >&)";
            "OHOS::Global::I18n::NumberFormat::~NumberFormat()";
            "OHOS::Global::I18n::IsIdeoGraphic(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::DateTimeFormat::FormatRange(long long, long long)";
            "OHOS::Global::I18n::DateTimeFormat::CreateInstance(std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > > const&, std::__h::map<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::less<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > >, std::__h::allocator<std::__h::pair<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > > >&)";
            "OHOS::Global::I18n::DateTimeFormat::GetResolvedOptions(std::__h::map<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::less<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > >, std::__h::allocator<std::__h::pair<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > > >&)";
            "OHOS::Global::I18n::DateTimeFormat::Format(long long)";
            "OHOS::Global::I18n::DateTimeFormat::DateTimeFormat(std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > > const&, std::__h::map<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::less<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > >, std::__h::allocator<std::__h::pair<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > > >&)";
            "OHOS::Global::I18n::DateTimeFormat::~DateTimeFormat()";
            "OHOS::Global::I18n::IsRTLCharacter(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::GetPreferredUnit(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > >&)";
            "OHOS::Global::I18n::ComputePowerValue(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::vector<double, std::__h::allocator<double> >&)";
            "OHOS::Global::I18n::ConvertString2Int(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, int&)";
            "OHOS::Global::I18n::I18nBreakIterator::IsBoundary(int)";
            "OHOS::Global::I18n::I18nBreakIterator::Last()";
            "OHOS::Global::I18n::I18nBreakIterator::Next(int)";
            "OHOS::Global::I18n::I18nBreakIterator::Next()";
            "OHOS::Global::I18n::I18nBreakIterator::First()";
            "OHOS::Global::I18n::I18nBreakIterator::Current()";
            "OHOS::Global::I18n::I18nBreakIterator::GetText(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >&)";
            "OHOS::Global::I18n::I18nBreakIterator::SetText(char const*)";
            "OHOS::Global::I18n::I18nBreakIterator::Previous()";
            "OHOS::Global::I18n::I18nBreakIterator::Following(int)";
            "OHOS::Global::I18n::I18nBreakIterator::I18nBreakIterator(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >)";
            "OHOS::Global::I18n::I18nBreakIterator::~I18nBreakIterator()";
            "OHOS::Global::I18n::PhoneNumberFormat::CreateInstance(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::map<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::less<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > >, std::__h::allocator<std::__h::pair<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > > > const&)";
            "OHOS::Global::I18n::PhoneNumberFormat::PhoneNumberFormat(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::map<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::less<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > >, std::__h::allocator<std::__h::pair<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > > > const&)";
            "OHOS::Global::I18n::PhoneNumberFormat::~PhoneNumberFormat()";
            "OHOS::Global::I18n::ComputeFactorValue(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::vector<double, std::__h::allocator<double> >&)";
            "OHOS::Global::I18n::RelativeTimeFormat::FormatToParts(double, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::vector<std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > >, std::__h::allocator<std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > > > >&)";
            "OHOS::Global::I18n::RelativeTimeFormat::Format(double, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::RelativeTimeFormat::GetResolvedOptions(std::__h::map<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::less<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > >, std::__h::allocator<std::__h::pair<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > > >&)";
            "OHOS::Global::I18n::RelativeTimeFormat::RelativeTimeFormat(std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > > const&, std::__h::map<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::less<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > >, std::__h::allocator<std::__h::pair<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > > >&)";
            "OHOS::Global::I18n::RelativeTimeFormat::~RelativeTimeFormat()";
            "OHOS::Global::I18n::ReadSystemParameter(char const*, int)";
            "OHOS::Global::I18n::ComputeSIPrefixValue(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::GetRestPreferredUnit(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > >&)";
            "OHOS::Global::I18n::GetDefaultPreferredUnit(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > >&)";
            "OHOS::Global::I18n::GetFallbackPreferredUnit(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > >&)";
            "OHOS::Global::I18n::Split(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > >&)";
            "OHOS::Global::I18n::GetType(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::IsDigit(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::Convert(double&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::GetMask(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::Collator::ResolvedOptions(std::__h::map<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::less<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > >, std::__h::allocator<std::__h::pair<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > > >&)";
            "OHOS::Global::I18n::Collator::Compare(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::Collator::Collator(std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > >&, std::__h::map<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> >, std::__h::less<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > >, std::__h::allocator<std::__h::pair<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > > > >&)";
            "OHOS::Global::I18n::Collator::~Collator()";
            "OHOS::Global::I18n::IsLetter(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::IndexUtil::GetIndexList()";
            "OHOS::Global::I18n::IndexUtil::GetIndex(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::IndexUtil::AddLocale(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::IndexUtil::IndexUtil(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&)";
            "OHOS::Global::I18n::IndexUtil::~IndexUtil()";
            "OHOS::Global::I18n::LocaleInfo::GetNumeric() const";
            "OHOS::Global::I18n::LocaleInfo::GetBaseName() const";
            "OHOS::Global::I18n::LocaleInfo::GetCalendar() const";
            "OHOS::Global::I18n::LocaleInfo::GetLanguage() const";
            "OHOS::Global::I18n::LocaleInfo::InitSuccess() const";
            "OHOS::Global::I18n::LocaleInfo::GetCaseFirst() const";
            "OHOS::Global::I18n::LocaleInfo::GetCollation() const";
            "OHOS::Global::I18n::LocaleInfo::GetHourCycle() const";
            "OHOS::Global::I18n::LocaleInfo::GetNumberingSystem() const";
            "OHOS::Global::I18n::LocaleInfo::ToString() const";
            "OHOS::Global::I18n::LocaleInfo::GetLocale() const";
            "OHOS::Global::I18n::LocaleInfo::GetRegion() const";
            "OHOS::Global::I18n::LocaleInfo::GetScript() const";
            "OHOS::Global::I18n::I18nCalendar::Get(UCalendarDateFields) const";
            "OHOS::Global::I18n::NumberFormat::GetCurrency() const";
            "OHOS::Global::I18n::NumberFormat::GetUseGrouping() const";
            "OHOS::Global::I18n::NumberFormat::GetCurrencySign() const";
            "OHOS::Global::I18n::NumberFormat::GetLocaleMatcher() const";
            "OHOS::Global::I18n::NumberFormat::GetNumberingSystem() const";
            "OHOS::Global::I18n::NumberFormat::GetMinimumIntegerDigits() const";
            "OHOS::Global::I18n::NumberFormat::GetMaximumFractionDigits() const";
            "OHOS::Global::I18n::NumberFormat::GetMinimumFractionDigits() const";
            "OHOS::Global::I18n::NumberFormat::GetMaximumSignificantDigits() const";
            "OHOS::Global::I18n::NumberFormat::GetMinimumSignificantDigits() const";
            "OHOS::Global::I18n::NumberFormat::GetStyle() const";
            "OHOS::Global::I18n::DateTimeFormat::GetWeekday() const";
            "OHOS::Global::I18n::DateTimeFormat::GetTimeZone() const";
            "OHOS::Global::I18n::DateTimeFormat::GetDateStyle() const";
            "OHOS::Global::I18n::DateTimeFormat::GetHourCycle() const";
            "OHOS::Global::I18n::DateTimeFormat::GetTimeStyle() const";
            "OHOS::Global::I18n::DateTimeFormat::GetTimeZoneName() const";
            "OHOS::Global::I18n::DateTimeFormat::GetNumberingSystem() const";
            "OHOS::Global::I18n::DateTimeFormat::GetDay() const";
            "OHOS::Global::I18n::DateTimeFormat::GetEra() const";
            "OHOS::Global::I18n::DateTimeFormat::GetHour() const";
            "OHOS::Global::I18n::DateTimeFormat::GetYear() const";
            "OHOS::Global::I18n::DateTimeFormat::GetMonth() const";
            "OHOS::Global::I18n::DateTimeFormat::GetHour12() const";
            "OHOS::Global::I18n::DateTimeFormat::GetMinute() const";
            "OHOS::Global::I18n::DateTimeFormat::GetSecond() const";
            "OHOS::Global::I18n::PhoneNumberFormat::getLocationName(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&) const";
            "OHOS::Global::I18n::PhoneNumberFormat::isValidPhoneNumber(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&) const";
            "OHOS::Global::I18n::PhoneNumberFormat::format(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char> > const&) const";
            "vtable for OHOS::Global::I18n::LocaleInfo";
            "vtable for OHOS::Global::I18n::I18nCalendar";
            "vtable for OHOS::Global::I18n::NumberFormat";
            "vtable for OHOS::Global::I18n::DateTimeFormat";
            "vtable for OHOS::Global::I18n::I18nBreakIterator";
            "vtable for OHOS::Global::I18n::PhoneNumberFormat";
            "vtable for OHOS::Global::I18n::RelativeTimeFormat";
            "typeinfo for std::__h::regex_error";
            "typeinfo for std::logic_error";
            "typeinfo for std::length_error";
            "typeinfo for std::out_of_range";
            "typeinfo for std::runtime_error";
            "typeinfo for std::invalid_argument";
            "typeinfo for std::exception";
            "typeinfo name for std::__h::regex_error";
            "typeinfo name for std::logic_error";
            "typeinfo name for std::length_error";
            "typeinfo name for std::out_of_range";
            "typeinfo name for std::runtime_error";
            "typeinfo name for std::invalid_argument";
            "typeinfo name for std::exception";
        };
    local:
        *;
};